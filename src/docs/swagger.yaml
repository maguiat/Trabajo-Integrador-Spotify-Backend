openapi: 3.0.3
info:
  title: Spotify Backend API
  description: 'API REST para plataforma de streaming musical estilo Spotify.


    ## Características principales:

    - Gestión completa de usuarios, artistas, álbumes y canciones

    - Sistema de playlists con soft-delete

    - Manejo de suscripciones y pagos

    - Vistas avanzadas con JOINs complejos

    - Validaciones exhaustivas y manejo de errores


    ## Ejercicios adicionales:

    - **Vistas con JOINs**: Consultas complejas para análisis de datos

    - **Canciones populares por país**: Análisis de reproducciones por ubicación geográfica

    - **Ingresos por artista/discográfica**: Análisis financiero detallado


    ## Autenticación:

    Algunos endpoints pueden requerir autenticación JWT (implementación opcional).

    '
  version: 1.0.0
  contact:
    name: Proyecto Integrador UNTreF
    email: estudiante@untref.edu.ar
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
- url: http://localhost:3000/api/v1
  description: Servidor de desarrollo local
- url: https://api.spotify-backend.com/v1
  description: Servidor de producción (ejemplo)
tags:
- name: Usuarios
  description: Gestión de usuarios y autenticación
- name: Artistas
  description: Gestión de artistas
- name: Álbumes
  description: Gestión de álbumes musicales
- name: Canciones
  description: Gestión de canciones y géneros
- name: Géneros
  description: Gestión de géneros musicales
- name: Playlists
  description: Gestión de playlists de usuarios
- name: Suscripciones
  description: Gestión de suscripciones de usuarios
- name: Métodos de Pago
  description: Gestión de métodos de pago
- name: Pagos
  description: Gestión de pagos y facturación
- name: Vistas Avanzadas
  description: Consultas complejas con JOINs (Ejercicios adicionales)
paths:
  /usuarios:
    get:
      tags: [Usuarios]
      summary: Listar usuarios
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
          description: Página a solicitar.
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, default: 20 }
          description: Tamaño de página.
      responses:
        "200":
          description: Lista paginada de usuarios (sin password_hash).
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuarios:
                    type: array
                    items: { $ref: "#/components/schemas/Usuario" }
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "404":
          description: No se encontraron usuarios.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Usuarios]
      summary: Crear usuario
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UsuarioCreate" }
      responses:
        "201":
          description: Usuario creado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  usuarioNuevo:
                    $ref: "#/components/schemas/Usuario"
        "400":
          description: Faltan campos requeridos o email duplicado.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorMessage"
                  - $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/ServerError"

  /usuarios/{id}:
    get:
      tags: [Usuarios]
      summary: Obtener usuario por ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Usuario encontrado (sin password_hash).
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Usuario" }
        "404":
          description: No se encontró el usuario.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags: [Usuarios]
      summary: Actualizar usuario
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UsuarioUpdate" }
      responses:
        "200":
          description: Usuario actualizado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  usuario: { $ref: "#/components/schemas/Usuario" }
        "404":
          description: Usuario no encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "409":
          description: Email ya registrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: FK inválida o validación de Sequelize.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags: [Usuarios]
      summary: Eliminar usuario
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Usuario eliminado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "404":
          description: Usuario no encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"

  /usuarios/password-vencidas:
    get:
      tags: [Usuarios]
      summary: Listar usuarios con contraseña vencida
      parameters:
        - in: query
          name: dias
          schema: { type: integer, default: 90, minimum: 1 }
          description: Días desde la última modificación de contraseña para considerarla vencida.
      responses:
        "200":
          description: Resultado con usuarios vencidos (o mensaje indicando ninguno).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  total: { type: integer }
                  dias_limite: { type: integer }
                  usuarios:
                    type: array
                    items:
                      type: object
                      properties:
                        id_usuario: { type: integer }
                        nyap: { type: string }
                        email: { type: string, format: email }
                        fecha_ult_mod_password: { type: string, format: date-time, nullable: true }
        "500":
          $ref: "#/components/responses/ServerError"

  /artistas:
    get:
      tags: [Artistas]
      summary: Listar artistas
      responses:
        "200":
          description: Lista de artistas.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Artista" }
        "404":
          description: No se encontraron artistas.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Artistas]
      summary: Crear artista
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ArtistaCreate" }
      responses:
        "201":
          description: Artista creado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  artista: { $ref: "#/components/schemas/Artista" }
        "400":
          description: Nombre ya registrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /artistas/{id}:
    get:
      tags: [Artistas]
      summary: Obtener artista por ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Artista encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Artista" }
        "404":
          description: No se encontró el artista.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"

  /generos:
    get:
      tags: [Géneros]
      summary: Listar géneros
      responses:
        "200":
          description: Lista de géneros ordenados por id_genero ASC.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  generos:
                    type: array
                    items: { $ref: "#/components/schemas/Genero" }
        "404":
          description: No se encontraron géneros.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Géneros]
      summary: Crear género
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/GeneroCreate" }
      responses:
        "201":
          description: Género creado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  genero: { $ref: "#/components/schemas/Genero" }
        "400":
          description: Falta nombre.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "409":
          description: Género duplicado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /albumes:
    get:
      tags: [Álbumes]
      summary: Listar álbumes (con filtros opcionales)
      parameters:
        - in: query
          name: artistaId
          schema: { type: integer }
          description: Filtrar por ID de artista.
        - in: query
          name: query
          schema: { type: string }
          description: Búsqueda por coincidencia parcial (campo `nombre` en el controller).
      responses:
        "200":
          description: Lista de álbumes.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Album" }
        "404":
          description: No se encontraron álbumes.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Álbumes]
      summary: Crear álbum
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AlbumCreate" }
      responses:
        "201":
          description: Álbum creado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  album: { $ref: "#/components/schemas/Album" }
        "400":
          description: Faltan campos o título duplicado para mismo artista.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /albumes/{id}:
    get:
      tags: [Álbumes]
      summary: Obtener álbum por ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Álbum encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Album" }
        "404":
          description: No se encontró el álbum.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"

  /albumes/{id}/canciones:
    get:
      tags: [Álbumes]
      summary: Listar canciones de un álbum
      description: |
        Devuelve las canciones pertenecientes al álbum dado por `id`.
        (Asegurate de que el controller consulte la tabla de canciones; hoy el código usa `Album.findAll`).
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Lista de canciones del álbum.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Cancion" }
        "404":
          description: No se encontraron canciones.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"

  /canciones:
    get:
      tags: [Canciones]
      summary: Listar canciones (filtros opcionales)
      parameters:
        - in: query
          name: genero
          schema: { type: integer }
          description: ID de género.
        - in: query
          name: artistaId
          schema: { type: integer }
          description: ID de artista (filtra por álbumes del artista).
        - in: query
          name: albumId
          schema: { type: integer }
          description: ID de álbum.
      responses:
        "200":
          description: Lista de canciones (con total).
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  canciones:
                    type: array
                    items: { $ref: "#/components/schemas/Cancion" }
        "404":
          description: No se encontraron canciones o filtros inválidos.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Canciones]
      summary: Crear canción
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CancionCreate" }
      responses:
        "201":
          description: Canción creada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  cancion: { $ref: "#/components/schemas/Cancion" }
        "400":
          description: Datos inválidos o álbum inexistente o título duplicado por álbum.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Álbum no encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"

  /canciones/{id}:
    get:
      tags: [Canciones]
      summary: Obtener canción por ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Canción encontrada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Cancion" }
        "404":
          description: No se encontró la canción.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags: [Canciones]
      summary: Actualizar canción
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CancionUpdate" }
      responses:
        "200":
          description: Canción actualizada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  cancion: { $ref: "#/components/schemas/Cancion" }
        "404":
          description: Canción no encontrada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: FK inválida o validación de Sequelize.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /canciones/{id}/generos:
    post:
      tags: [Canciones]
      summary: Asociar género a canción
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id_genero]
              properties:
                id_genero: { type: integer }
      responses:
        "201":
          description: Género asociado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  cancion:
                    type: object
                    properties:
                      id_cancion: { type: integer }
                      titulo: { type: string }
                  genero:
                    type: object
                    properties:
                      id_genero: { type: integer }
                      nombre: { type: string }
        "400":
          description: Falta id_genero.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Canción o género no encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "409":
          description: Asociación ya existente.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /canciones/{id}/generos/{id_genero}:
    delete:
      tags: [Canciones]
      summary: Eliminar asociación género-canción
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: id_genero
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Asociación eliminada.
          content:
            application/json:
              schema:
                type: object

        "404":
          description: Canción/género inexistente o asociación no encontrada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /playlists:
    get:
      tags: [Playlists]
      summary: Listar playlists
      responses:
        "200":
          description: Lista de playlists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  playlists:
                    type: array
                    items: { $ref: "#/components/schemas/Playlist" }
        "404":
          description: No se encontraron playlists.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Playlists]
      summary: Crear playlist
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PlaylistCreate" }
      responses:
        "201":
          description: Playlist creada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  playlist: { $ref: "#/components/schemas/Playlist" }
        "400":
          description: Faltan campos requeridos.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Usuario no encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /playlists/{id}:
    get:
      tags: [Playlists]
      summary: Obtener playlist por ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Playlist encontrada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Playlist" }
        "404":
          description: No se encontró la playlist.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags: [Playlists]
      summary: Actualizar playlist
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PlaylistUpdate" }
      responses:
        "200":
          description: Playlist actualizada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  playlistActualizada: { $ref: "#/components/schemas/Playlist" }
        "404":
          description: Playlist no encontrada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "400":
          description: Estado inválido o falta fecha_eliminada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /playlists/{id}/canciones:
    post:
      tags: [Playlists]
      summary: Agregar canción a playlist
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PlaylistSongAdd" }
      responses:
        "201":
          description: Canción agregada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  playlistActualizada: { $ref: "#/components/schemas/Playlist" }
        "404":
          description: Playlist o canción no encontrada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "409":
          description: Canción ya está en playlist.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /playlists/{id}/canciones/{id_cancion}:
    delete:
      tags: [Playlists]
      summary: Eliminar canción de playlist
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: id_cancion
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Canción eliminada de playlist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  playlistActualizada: { $ref: "#/components/schemas/Playlist" }
        "404":
          description: Playlist/canción no encontrada o no estaba en la playlist.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /suscripciones:
    get:
      tags: [Suscripciones]
      summary: Listar suscripciones
      responses:
        "200":
          description: Lista de suscripciones.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  suscripciones:
                    type: array
                    items: { $ref: "#/components/schemas/Suscripcion" }
        "404":
          description: No se encontraron suscripciones.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Suscripciones]
      summary: Crear suscripción
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SuscripcionCreate" }
      responses:
        "201":
          description: Suscripción creada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  suscripcion: { $ref: "#/components/schemas/Suscripcion" }
        "400":
          description: Faltan campos o fechas inválidas.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Usuario o tipo de usuario no encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /suscripciones/{id}:
    get:
      tags: [Suscripciones]
      summary: Obtener suscripción por ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Suscripción encontrada.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Suscripcion" }
        "404":
          description: No se encontró la suscripción.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"

  /metodos-pago:
    get:
      tags: ["Métodos de Pago"]
      summary: Listar métodos de pago por usuario
      parameters:
        - in: query
          name: usuarioId
          required: true
          schema: { type: integer }
          description: ID del usuario.
      responses:
        "200":
          description: Métodos de pago del usuario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  metodosPago:
                    type: array
                    items: { $ref: "#/components/schemas/MetodoPago" }
        "400":
          description: Falta usuarioId.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Usuario no encontrado o sin métodos.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: ["Métodos de Pago"]
      summary: Crear método de pago
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MetodoPagoCreate" }
      responses:
        "201":
          description: Método de pago creado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  metodoPago: { $ref: "#/components/schemas/MetodoPago" }
        "400":
          description: Faltan datos o tipo inválido.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Usuario no encontrado.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

  /pagos:
    get:
      tags: [Pagos]
      summary: Listar pagos por usuario y rango de fechas (opcional)
      parameters:
        - in: query
          name: usuarioId
          required: true
          schema: { type: integer }
        - in: query
          name: desde
          schema: { type: string, format: date }
          description: Fecha mínima (YYYY-MM-DD).
        - in: query
          name: hasta
          schema: { type: string, format: date }
          description: Fecha máxima (YYYY-MM-DD).
      responses:
        "200":
          description: Lista de pagos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  pagos:
                    type: array
                    items: { $ref: "#/components/schemas/Pago" }
        "400":
          description: Falta usuarioId.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Usuario no encontrado o sin pagos.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorMessage" }
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags: [Pagos]
      summary: Crear pago
      parameters:
        - in: query
          name: usuarioId
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PagoCreate" }
      responses:
        "201":
          description: Pago creado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  pago: { $ref: "#/components/schemas/Pago" }
        "400":
          description: Faltan campos o importe inválido.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Usuario / suscripción / método de pago inexistente.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          $ref: "#/components/responses/ServerError"

components:
  parameters:
    PathId:
      in: path
      name: id
      required: true
      schema: { type: integer }

  responses:
    ServerError:
      description: Error interno del servidor.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

  schemas:
    Message:
      type: object
      properties:
        message: { type: string }

    ErrorMessage:
      type: object
      properties:
        message: { type: string }
    Error:
      type: object
      properties:
        error: { type: string }
        description:
          type: string
          nullable: true

    Pagination:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        pages: { type: integer }

    Usuario:
      type: object
      properties:
        id_usuario: { type: integer }
        nyap: { type: string }
        email: { type: string, format: email }
        fecha_nac: { type: string, format: date }
        sexo: { type: string }
        cp: { type: string }
        id_pais: { type: integer }
        tipo_usuario_actual: { type: integer }
    UsuarioCreate:
      type: object
      required: [nyap, email, password, fecha_nac, sexo, cp, id_pais, tipo_usuario_actual]
      properties:
        nyap: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }
        fecha_nac: { type: string, format: date }
        sexo: { type: string }
        cp: { type: string }
        id_pais: { type: integer }
        tipo_usuario_actual: { type: integer }
    UsuarioUpdate:
      type: object
      properties:
        nyap: { type: string }
        email: { type: string, format: email }
        fecha_nac: { type: string, format: date }
        sexo: { type: string }
        cp: { type: string }
        id_pais: { type: integer }
        tipo_usuario_actual: { type: integer }

    Artista:
      type: object
      properties:
        id_artista: { type: integer }
        nombre: { type: string }
        imagen_url: { type: string, nullable: true }
    ArtistaCreate:
      type: object
      required: [nombre]
      properties:
        nombre: { type: string }
        imagen_url: { type: string, nullable: true }

    Genero:
      type: object
      properties:
        id_genero: { type: integer }
        nombre: { type: string }
    GeneroCreate:
      type: object
      required: [nombre]
      properties:
        nombre: { type: string }

    Album:
      type: object
      properties:
        id_album: { type: integer }
        titulo: { type: string }
        id_artista: { type: integer }
        id_discografica: { type: integer }
        anio_publicacion: { type: integer }
        duracion_total_seg:
          type: integer
          nullable: true
    AlbumCreate:
      type: object
      required: [titulo, id_artista, id_discografica, anio_publicacion]
      properties:
        titulo: { type: string }
        id_artista: { type: integer }
        id_discografica: { type: integer }
        anio_publicacion: { type: integer }
        duracion_total_seg:
          type: integer
          nullable: true

    Cancion:
      type: object
      properties:
        id_cancion: { type: integer }
        titulo: { type: string }
        duracion_seg: { type: integer }
        id_album: { type: integer }
        reproducciones: { type: integer, nullable: true }
        likes: { type: integer, nullable: true }
    CancionCreate:
      type: object
      required: [titulo, duracion_seg, id_album]
      properties:
        titulo: { type: string }
        duracion_seg: { type: integer, minimum: 1 }
        id_album: { type: integer }
        reproducciones: { type: integer, nullable: true }
        likes: { type: integer, nullable: true }
    CancionUpdate:
      type: object
      properties:
        titulo: { type: string }
        duracion_seg: { type: integer, minimum: 1 }
        id_album: { type: integer }
        reproducciones: { type: integer }
        likes: { type: integer }

    Playlist:
      type: object
      properties:
        id_playlist: { type: integer }
        titulo: { type: string }
        id_usuario: { type: integer }
        cant_canciones: { type: integer }
        estado: { type: string, enum: ["Activa", "Eliminada", "activa", "eliminada"] }
        fecha_creacion: { type: string, format: date-time }
        fecha_eliminada: { type: string, format: date-time, nullable: true }
    PlaylistCreate:
      type: object
      required: [titulo, id_usuario]
      properties:
        titulo: { type: string }
        id_usuario: { type: integer }
    PlaylistUpdate:
      type: object
      properties:
        titulo: { type: string }
        estado:
          type: string
          enum: ["Activa", "Eliminada", "activa", "eliminada"]
        fecha_eliminada:
          type: string
          format: date-time
          nullable: true
    PlaylistSongAdd:
      type: object
      required: [id_cancion]
      properties:
        id_cancion: { type: integer }
        orden:
          type: integer
          nullable: true

    Suscripcion:
      type: object
      properties:
        id_suscripcion: { type: integer }
        id_usuario: { type: integer }
        tipo_usuario: { type: integer }
        fecha_inicio: { type: string, format: date-time }
        fecha_renovacion: { type: string, format: date-time }
    SuscripcionCreate:
      type: object
      required: [id_usuario, tipo_usuario, fecha_inicio, fecha_renovacion]
      properties:
        id_usuario: { type: integer }
        tipo_usuario: { type: integer }
        fecha_inicio: { type: string, format: date-time }
        fecha_renovacion: { type: string, format: date-time }

    MetodoPago:
      type: object
      properties:
        id_metodo_pago: { type: integer }
        id_usuario: { type: integer }
        tipo_forma_pago:
          type: string
          enum: ["Credito", "Debito", "Efectivo", "Debito Automatico x Banco"]
        cbu: { type: string, nullable: true }
        banco_codigo: { type: integer }
        nro_tarjeta_masc: { type: string, nullable: true }
        mes_caduca: { type: integer, nullable: true }
        anio_caduca: { type: integer, nullable: true }
    MetodoPagoCreate:
      type: object
      required: [id_usuario, tipo_forma_pago]
      properties:
        id_usuario: { type: integer }
        tipo_forma_pago:
          type: string
          enum: ["Credito", "Debito", "Efectivo", "Debito Automatico x Banco"]
        cbu: { type: string, nullable: true }
        nro_tarjeta: { type: string, nullable: true, description: "Solo para Credito/Debito. Se enmascara automáticamente." }
        mes_caduca: { type: integer, nullable: true }
        anio_caduca: { type: integer, nullable: true }
        banco_codigo: { type: integer, nullable: true }

    Pago:
      type: object
      properties:
        id_pago: { type: integer }
        id_usuario: { type: integer }
        id_suscripcion: { type: integer }
        id_metodo_pago: { type: integer }
        importe: { type: number, format: float }
        fecha_pago: { type: string, format: date-time }
    PagoCreate:
      type: object
      required: [id_suscripcion, id_metodo_pago, importe]
      properties:
        id_suscripcion: { type: integer }
        id_metodo_pago: { type: integer }
        importe: { type: number, format: float, minimum: 0 }